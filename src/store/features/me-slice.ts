import { createSlice, createAsyncThunk, type PayloadAction } from '@reduxjs/toolkit';
import { getMe } from '@/services/auth';
import { ResponseStatus } from '@/constant';
import { type RootState } from '..';
import builder from '../builder';

const sliceName = 'me';

const initialState: Response.ReduxState<Partial<Response.Me>> = {
  status: ResponseStatus.Loading,
  result: {},
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(fetchMeSync())`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchMeSync = createAsyncThunk(`${sliceName}/fetchMe`, async () => {
  const response = await getMe();
  return response.data;
});

export const counterSlice = createSlice({
  name: sliceName,
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setMe: (state, action: PayloadAction<Response.Me>) => {
      logger.v(state, action);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // builder<any, typeof initialState>(fetchMeSync),
  extraReducers: builder<Partial<Response.Me>>(fetchMeSync),
});

// action
export const { setMe } = counterSlice.actions;

// selector
export const selectMe = (state: RootState) => {
  return state.me;
};

export default counterSlice.reducer;
